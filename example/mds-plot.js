// Generated by CoffeeScript 1.7.1
(function() {
  var BarGraph, ScatterPlot;

  ScatterPlot = (function() {
    function ScatterPlot(opts) {
      var div, gBrush, margin, svg_h, svg_w, _base, _base1, _base2, _base3, _base4;
      this.opts = opts;
      if ((_base = this.opts).elem == null) {
        _base.elem = 'svg';
      }
      if ((_base1 = this.opts).width == null) {
        _base1.width = 500;
      }
      if ((_base2 = this.opts).height == null) {
        _base2.height = 400;
      }
      if ((_base3 = this.opts).left == null) {
        _base3.left = 100;
      }
      if ((_base4 = this.opts).right == null) {
        _base4.right = 100;
      }
      this.opts.callback = {};
      ['click', 'mouseover', 'mousemove', 'mouseout', 'brush'].forEach((function(_this) {
        return function(s) {
          return _this.opts.callback[s] = _this.opts[s];
        };
      })(this));
      margin = {
        top: 20,
        right: this.opts.right,
        bottom: 40,
        left: this.opts.left
      };
      this.width = this.opts.width - margin.left - margin.right;
      this.height = this.opts.height - margin.top - margin.bottom;
      this.x = d3.scale.linear().range([0, this.width]);
      this.y = d3.scale.linear().range([this.height, 0]);
      this.color = d3.scale.category10();
      this.xAxis = d3.svg.axis().scale(this.x).orient("bottom");
      this.yAxis = d3.svg.axis().scale(this.y).orient("left");
      svg_w = this.width + margin.left + margin.right;
      svg_h = this.height + margin.top + margin.bottom;
      div = d3.select(this.opts.elem).append("div").attr("class", "mds-scatter");
      this.svg = div.append("svg").attr("width", "100%").attr("height", "100%").attr("viewBox", "0 0 " + svg_w + " " + svg_h).attr("class", "main").append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");
      this.svg_overlay = div.append('svg').attr("width", "100%").attr("height", "100%").attr("viewBox", "0 0 " + svg_w + " " + svg_h).attr("class", "overlay").append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");
      gBrush = this.svg.append('g');
      this.mybrush = d3.svg.brush().x(this.x).y(this.y).clamp([false, false]).on("brush", (function(_this) {
        return function() {
          return _this._brushed();
        };
      })(this));
      gBrush.call(this.mybrush);
    }

    ScatterPlot.prototype._brushed = function() {
      var sel;
      sel = this._selected();
      return this._event('brush', sel);
    };

    ScatterPlot.prototype._selected = function() {
      var ex, sel;
      if (this.mybrush.empty()) {
        return null;
      } else {
        ex = this.mybrush.extent();
        sel = this.locs.filter(function(d) {
          return d.x >= ex[0][0] && d.x <= ex[1][0] && d.y >= ex[0][1] && d.y <= ex[1][1];
        });
        return sel.map(function(d) {
          return d.item;
        });
      }
    };

    ScatterPlot.prototype.draw = function(data, labels, dims) {
      var dim1, dim2, dot_g, dots, locs;
      dim1 = dims[0], dim2 = dims[1];
      this.x.domain(d3.extent(data[dim1]));
      this.y.domain(d3.extent(data[dim2]));
      locs = d3.transpose(data);
      this.svg.selectAll(".axis").remove();
      this.svg.append("g").attr("class", "x axis").attr("transform", "translate(0," + this.height + ")").call(this.xAxis).append("text").attr("class", "label").attr("x", 8 + this.width).attr("y", 10).style("text-anchor", "start").text("Dim " + (dim1 + 1));
      this.svg.append("g").attr("class", "y axis").call(this.yAxis).append("text").attr("class", "label").attr("transform", "rotate(-90)").attr("y", 6).attr("dy", ".71em").style("text-anchor", "end").text("Dim " + (dim2 + 1));
      dots = this.svg.selectAll(".dot").data(locs);
      dots.exit().remove();
      dot_g = dots.enter().append("g").attr('class', function(d, i) {
        return "dot strain-" + i;
      });
      dot_g.append("rect").attr("width", 80).attr("height", 13).attr('x', -3).attr('y', -3 - 10).attr('rx', 5).attr('ry', 5);
      dot_g.append("circle").attr('class', function(d, i) {
        return "strain-" + i;
      }).attr("r", 3.5).attr("cx", 0).attr("cy", 0).on("click", (function(_this) {
        return function(_, i) {
          return _this._event('click', labels[i]);
        };
      })(this)).on("mouseover", (function(_this) {
        return function(_, i) {
          return _this._event('mouseover', labels[i]);
        };
      })(this)).on("mouseout", (function(_this) {
        return function(_, i) {
          return _this._event('mouseout', labels[i]);
        };
      })(this));
      dot_g.append("text").attr('class', function(d, i) {
        return "labels strain-" + i;
      }).text(function(d, i) {
        return labels[i].name;
      }).attr('x', 3).attr('y', -3).on("click", (function(_this) {
        return function(_, i) {
          return _this._event('click', labels[i]);
        };
      })(this)).on("mouseover", (function(_this) {
        return function(_, i) {
          return _this._event('mouseover', labels[i]);
        };
      })(this)).on("mouseout", (function(_this) {
        return function(_, i) {
          return _this._event('mouseout', labels[i]);
        };
      })(this));
      dots.transition().duration(10).attr("transform", (function(_this) {
        return function(d) {
          return "translate(" + (_this.x(d[dim1])) + "," + (_this.y(d[dim2])) + ")";
        };
      })(this));
      return this.locs = locs.map((function(_this) {
        return function(d, i) {
          return {
            x: d[dim1],
            y: d[dim2],
            item: labels[i]
          };
        };
      })(this));
    };

    ScatterPlot.prototype.highlight = function(cls) {
      var elem;
      elem = this.svg.select(".dot." + cls);
      return this.svg_overlay[0][0].appendChild(elem[0][0].cloneNode(true));
    };

    ScatterPlot.prototype.unhighlight = function() {
      return this.svg_overlay.html('');
    };

    ScatterPlot.prototype._event = function(typ, arg) {
      if (this.opts.callback[typ]) {
        return this.opts.callback[typ](arg);
      }
    };

    return ScatterPlot;

  })();

  BarGraph = (function() {
    function BarGraph(opts) {
      var margin, _base, _base1;
      this.opts = opts;
      (_base = this.opts).tot_width || (_base.tot_width = 200);
      (_base1 = this.opts).tot_height || (_base1.tot_height = 160);
      margin = {
        top: 20,
        right: 5,
        bottom: 30,
        left: 45
      };
      this.width = this.opts.tot_width - margin.left - margin.right;
      this.height = this.opts.tot_height - margin.top - margin.bottom;
      this.x = d3.scale.ordinal().rangeRoundBands([0, this.width], .1);
      this.y = d3.scale.linear().range([this.height, 0]);
      this.xAxis = d3.svg.axis().scale(this.x).orient("bottom").tickSize(8, 1);
      this.yAxis = d3.svg.axis().scale(this.y).orient("left").tickSize(8, 1).ticks(5).tickFormat(d3.format("%"));
      this.svg = d3.select(this.opts.elem).append("svg").attr('class', 'bar-chart').attr("width", this.width + margin.left + margin.right).attr("height", this.height + margin.top + margin.bottom).append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");
    }

    BarGraph.prototype.draw = function(data) {
      this.svg.selectAll("*").remove();
      this.x.domain(data.map(function(d) {
        return d.lbl;
      }));
      this.y.domain([
        0, d3.max(data, function(d) {
          return d.val;
        })
      ]);
      this.svg.append("text").attr('class', 'title').attr("x", this.width / 2 - 14).attr("y", -10).style("text-anchor", "middle").text("Variance percentage by MDS dimension");
      this.svg.append("g").attr("class", "x axis").attr("transform", "translate(0," + this.height + ")").call(this.xAxis).append("text").attr('class', 'label').attr("x", this.width / 2).attr("y", 30).style("text-anchor", "middle").text("Dimension");
      this.svg.append("g").attr("class", "y axis").call(this.yAxis).append("text").attr('class', 'label').attr("transform", "rotate(-90)").attr("x", -10).attr("y", -33).style("text-anchor", "end").text("Variance percentage");
      return this.svg.selectAll(".bar").data(data).enter().append("rect").attr("class", "bar").attr("x", (function(_this) {
        return function(d) {
          return _this.x(d.lbl);
        };
      })(this)).attr("width", this.x.rangeBand()).attr("y", (function(_this) {
        return function(d) {
          return _this.y(d.val);
        };
      })(this)).attr("height", (function(_this) {
        return function(d) {
          return _this.height - _this.y(d.val);
        };
      })(this)).on('click', (function(_this) {
        return function(d) {
          if (_this.opts.click != null) {
            return _this.opts.click(d);
          }
        };
      })(this));
    };

    return BarGraph;

  })();

  this.ScatterPlot = ScatterPlot;

  this.BarGraph = BarGraph;

}).call(this);
