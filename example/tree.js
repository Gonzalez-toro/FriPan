// Generated by CoffeeScript 1.7.1
(function() {
  var Dendrogram, TreeBuilder,
    __slice = [].slice;

  TreeBuilder = (function() {
    function TreeBuilder(dist, method) {
      var min, n, to_join, tree;
      method = {
        max: d3.max,
        min: d3.min,
        avg: d3.min
      }[method || 'max'];
      to_join = d3.keys(dist);
      tree = [];
      this.by_name = {};
      to_join.forEach((function(_this) {
        return function(n) {
          return _this.by_name[n] = {
            name: n
          };
        };
      })(this));
      this.dist = {};
      to_join.map((function(_this) {
        return function(k1) {
          return to_join.map(function(k2) {
            var _base;
            return ((_base = _this.dist)[k1] || (_base[k1] = {}))[k2] = dist[k1][k2];
          });
        };
      })(this));
      while (to_join.length > 1) {
        min = this._pick_min(to_join);
        n = {
          name: "_node_" + tree.length,
          children: [min.n1, min.n2],
          dist: min.val
        };
        tree.push(n);
        this.by_name[n.name] = n;
        to_join.splice(to_join.indexOf(min.n1), 1);
        to_join.splice(to_join.indexOf(min.n2), 1);
        to_join.push(n.name);
      }
      this.flattened = [];
      this.tree = this._mk_subtree(tree.slice(-1)[0], this.flattened);
    }

    TreeBuilder.prototype._mk_subtree = function(node, flattened) {
      var children, n;
      children = node.children != null ? node.children.map((function(_this) {
        return function(c) {
          return _this._mk_subtree(_this.by_name[c], flattened);
        };
      })(this)) : [];
      n = {
        name: node.name,
        children: children,
        dist: node.dist || 0,
        leaf: children.length === 0
      };
      flattened.push(n);
      return n;
    };

    TreeBuilder.prototype._pick_min = function(nodes) {
      var d, i, j, min, n1, n2, _i, _j, _ref;
      min = null;
      for (i = _i = 0, _ref = nodes.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        for (j = _j = 0; 0 <= i ? _j < i : _j > i; j = 0 <= i ? ++_j : --_j) {
          n1 = nodes[i];
          n2 = nodes[j];
          d = this._get_dist(n1, n2);
          if ((min == null) || d < min.val) {
            min = {
              val: d,
              n1: n1,
              n2: n2
            };
          }
        }
      }
      return min;
    };

    TreeBuilder.prototype._get_dist = function(n1, n2) {
      var children, d, dists, _base, _base1, _ref;
      if ((this.dist[n1] != null) && (this.dist[n1][n2] != null)) {
        return this.dist[n1][n2];
      }
      if (this.by_name[n1].children != null) {
        _ref = [n2, n1], n1 = _ref[0], n2 = _ref[1];
      }
      if (this.by_name[n2].children != null) {
        children = this.by_name[n2].children;
        dists = children.map((function(_this) {
          return function(c) {
            return _this._get_dist(n1, c);
          };
        })(this));
        d = d3.max(dists);
      } else {
        console.log("Can't find distance between " + n1 + " and " + n2);
        die;
      }
      ((_base = this.dist)[n1] || (_base[n1] = {}))[n2] = d;
      ((_base1 = this.dist)[n2] || (_base1[n2] = {}))[n1] = d;
      return d;
    };

    return TreeBuilder;

  })();

  Dendrogram = (function() {
    function Dendrogram(opts) {
      var zoom, _base, _base1, _base2, _base3, _base4, _base5, _base6;
      this.opts = opts;
      (_base = this.opts).width || (_base.width = 500);
      (_base1 = this.opts).height || (_base1.height = 500);
      (_base2 = this.opts).label_width || (_base2.label_width = 180);
      (_base3 = this.opts).h_pad || (_base3.h_pad = 20);
      (_base4 = this.opts).w_pad || (_base4.w_pad = 10);
      this.opts.axis_height = 10;
      (_base5 = this.opts).label_pad || (_base5.label_pad = 5);
      (_base6 = this.opts).radius || (_base6.radius = 150);
      this.opts.callback = {};
      ['mouseover', 'mouseout'].forEach((function(_this) {
        return function(s) {
          return _this.opts.callback[s] = _this.opts[s];
        };
      })(this));
      zoom = d3.behavior.zoom().scaleExtent([0.2, 10]).on("zoom", (function(_this) {
        return function() {
          return _this._zoomed();
        };
      })(this));
      this.svg = d3.select(this.opts.elem).append("svg").attr("class", "dendrogram").attr("width", "100%").attr("height", "100%").attr("viewBox", "0 0 " + this.opts.width + " " + this.opts.height + " ").call(zoom);
      this.svg.append("rect").attr("width", this.opts.width).attr("height", this.opts.height).style("fill", "none").style("pointer-events", "all");
      this.g = this.svg.append("g");
    }

    Dendrogram.prototype._zoomed = function() {
      return this.g.attr("transform", "translate(" + d3.event.translate + ")scale(" + d3.event.scale + ")");
    };

    Dendrogram.prototype._calc_pos = function(node, leaf_pos) {
      var c1, c2, _ref, _ref1;
      if (node.leaf) {
        node.y = leaf_pos;
        return leaf_pos + 1;
      } else {
        _ref = node.children, c1 = _ref[0], c2 = _ref[1];
        if (c1.dist > c2.dist) {
          _ref1 = [c1, c2], c2 = _ref1[0], c1 = _ref1[1];
        }
        leaf_pos = this._calc_pos(c1, leaf_pos);
        leaf_pos = this._calc_pos(c2, leaf_pos);
        node.y = 0.5 * (c1.y + c2.y);
        return leaf_pos;
      }
    };

    Dendrogram.prototype._prep_tree = function(builder) {
      var all, leaves, nodes, root;
      root = builder.tree;
      all = builder.flattened;
      nodes = all.filter(function(n) {
        return !n.leaf;
      });
      leaves = all.filter(function(n) {
        return n.leaf;
      });
      this._calc_pos(root, 0);
      return [root, nodes, leaves];
    };

    Dendrogram.prototype._attach_colours = function(node, node_info) {
      var col1, col2;
      if (node.leaf) {
        return node.colour = node_info[node.name] != null ? node_info[node.name].colour : 'black';
      } else {
        node.children.forEach((function(_this) {
          return function(n) {
            return _this._attach_colours(n, node_info);
          };
        })(this));
        col1 = node.children[0].colour;
        col2 = node.children[1].colour;
        return node.colour = col1 === col2 ? col1 : 'black';
      }
    };

    Dendrogram.prototype.clear = function() {
      return this.g.selectAll('*').remove();
    };

    Dendrogram.prototype.draw = function(typ, builder, node_info) {
      if (node_info == null) {
        node_info = {};
      }
      typ || (typ = 'horz');
      if (typ === 'horz') {
        return this.draw_horz(builder, node_info);
      } else if (typ === 'radial') {
        return this.draw_radial(builder, node_info);
      } else {
        return log_error("Unknown dendrogram type", typ);
      }
    };

    Dendrogram.prototype.draw_horz = function(builder, node_info) {
      var axis, clazz, g, get, leaves, mk_line, node2line, nodes, root, text, x, y, _ref;
      this.clear();
      _ref = this._prep_tree(builder), root = _ref[0], nodes = _ref[1], leaves = _ref[2];
      this._attach_colours(root, node_info);
      x = d3.scale.linear().range([this.opts.width - this.opts.label_width - this.opts.w_pad, 0]).domain([0, root.dist]);
      y = d3.scale.linear().range([0, d3.max([leaves.length * 10, this.opts.height - this.opts.h_pad - this.opts.axis_height])]).domain([0, leaves.length]);
      g = this.g.append("g").attr("transform", "translate(" + this.opts.w_pad + "," + (this.opts.h_pad + this.opts.axis_height) + ")");
      node2line = function(n) {
        return [
          {
            x: n.children[0].dist,
            y: n.children[0].y
          }, {
            x: n.dist,
            y: n.children[0].y
          }, {
            x: n.dist,
            y: n.children[1].y
          }, {
            x: n.children[1].dist,
            y: n.children[1].y
          }
        ];
      };
      mk_line = d3.svg.line().x(function(d) {
        return x(d.x);
      }).y(function(d) {
        return y(d.y);
      });
      g.selectAll('path.link').data(nodes).enter().append('path').attr('class', function(d) {
        return 'link ' + d.name;
      }).attr("stroke", function(d) {
        return d.colour;
      }).attr('d', function(d) {
        return mk_line(node2line(d));
      }).on('mouseover', (function(_this) {
        return function(d) {
          return _this._mouseover(node_info, d);
        };
      })(this)).on('mouseout', (function(_this) {
        return function(d) {
          return _this._mouseout(node_info, d);
        };
      })(this));
      get = function(d, fld, def) {
        if (node_info[d.name] != null) {
          return node_info[d.name][fld];
        } else {
          return def;
        }
      };
      text = function(d) {
        return get(d, 'text', d.name);
      };
      clazz = function(d) {
        return get(d, 'clazz', '');
      };
      g.selectAll('text.leaf').data(leaves).enter().append("text").attr("class", function(d) {
        return "leaf " + clazz(d);
      }).attr("text-anchor", "start").attr("dominant-baseline", "central").attr("x", (function(_this) {
        return function(d) {
          return _this.opts.label_pad + x(d.dist);
        };
      })(this)).attr("y", function(d) {
        return y(d.y);
      }).attr("fill", function(d) {
        return d.colour;
      }).text(function(d) {
        return text(d);
      }).on('mouseover', (function(_this) {
        return function(d) {
          return _this._mouseover(node_info, d);
        };
      })(this)).on('mouseout', (function(_this) {
        return function(d) {
          return _this._mouseout(node_info, d);
        };
      })(this));
      axis = d3.svg.axis().scale(x).orient("top").ticks(4);
      this.g.selectAll(".axis").remove();
      return this.g.append("g").attr("class", "axis").attr("transform", "translate(" + this.opts.w_pad + "," + this.opts.h_pad + ")").call(axis);
    };

    Dendrogram.prototype.draw_radial = function(builder, node_info) {
      var clazz, g, get, isTxtUp, leaves, mk_line, nodes, root, text, x, y, yRad, yTxt, _ref;
      this.clear();
      _ref = this._prep_tree(builder), root = _ref[0], nodes = _ref[1], leaves = _ref[2];
      this._attach_colours(root, node_info);
      x = d3.scale.linear().range([this.opts.radius, 0]).domain([0, root.dist]);
      y = d3.scale.linear().range([0, 359]).domain([0, leaves.length]);
      yTxt = d3.scale.linear().range([-90, 359 - 90]).domain([0, leaves.length]);
      yRad = function(v) {
        return y(v) * Math.PI / 180;
      };
      g = this.g.append("g").attr("transform", "translate(" + (this.opts.width / 2) + "," + (this.opts.height / 2) + ") rotate(-90)");
      mk_line = function(n) {
        var f, f2;
        f = d3.svg.arc().innerRadius(function(d) {
          return x(d.dist);
        }).outerRadius(function(d) {
          return x(d.dist);
        }).startAngle(function(d) {
          return yRad(d.children[0].y);
        }).endAngle(function(d) {
          return yRad(d.children[1].y);
        });
        f2 = function(n, i) {
          return d3.svg.line.radial()([[x(n.children[i].dist), yRad(n.children[i].y)], [x(n.dist), yRad(n.children[i].y)]]);
        };
        return f(n) + f2(n, 0) + f2(n, 1);
      };
      g.selectAll('path.link').data(nodes).enter().append('path').attr('class', function(d) {
        return 'link ' + d.name;
      }).attr("stroke", function(d) {
        return d.colour;
      }).attr('d', function(d) {
        return mk_line(d);
      }).on('mouseover', (function(_this) {
        return function(d) {
          return _this._mouseover(node_info, d);
        };
      })(this)).on('mouseout', (function(_this) {
        return function(d) {
          return _this._mouseout(node_info, d);
        };
      })(this));
      isTxtUp = function(r) {
        return r >= 0 && r < 180;
      };
      get = function(d, fld, def) {
        if (node_info[d.name] != null) {
          return node_info[d.name][fld];
        } else {
          return def;
        }
      };
      text = function(d) {
        return get(d, 'text', d.name);
      };
      clazz = function(d) {
        return get(d, 'clazz', '');
      };
      return g.selectAll('text.leaf').data(leaves).enter().append("g").attr("transform", (function(_this) {
        return function(d) {
          var r;
          r = yTxt(d.y);
          return "rotate(" + (isTxtUp(r) ? r : 180 + r) + " 0 0)";
        };
      })(this)).append("text").attr("class", function(d) {
        return "leaf " + clazz(d);
      }).attr("text-anchor", function(d) {
        var r;
        r = yTxt(d.y);
        if (isTxtUp(r)) {
          return "start";
        } else {
          return "end";
        }
      }).attr("dominant-baseline", "central").attr("x", (function(_this) {
        return function(d) {
          return (_this.opts.label_pad + x(d.dist)) * (isTxtUp(yTxt(d.y)) ? 1 : -1);
        };
      })(this)).attr("fill", function(d) {
        return d.colour;
      }).text(function(d) {
        return text(d);
      }).on('mouseover', (function(_this) {
        return function(d) {
          return _this._mouseover(node_info, d);
        };
      })(this)).on('mouseout', (function(_this) {
        return function(d) {
          return _this._mouseout(node_info, d);
        };
      })(this));
    };

    Dendrogram.prototype._mouseover = function(node_info, d) {
      var leaves, nodes, trav;
      trav = function(n, leaves, nodes) {
        if (n.leaf) {
          leaves.push(node_info[n.name]);
        } else {
          nodes.push("path.link." + n.name);
        }
        return n.children.forEach(function(c) {
          return trav(c, leaves, nodes);
        });
      };
      leaves = [];
      nodes = [];
      trav(d, leaves, nodes);
      return this._event('mouseover', leaves, d, nodes);
    };

    Dendrogram.prototype._mouseout = function(node_info, d) {
      return this._event('mouseout', node_info[d.name], d);
    };

    Dendrogram.prototype._event = function() {
      var args, typ;
      typ = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (this.opts.callback[typ]) {
        return this.opts.callback[typ](args);
      }
    };

    return Dendrogram;

  })();

  window.Dendrogram = Dendrogram;

  window.TreeBuilder = TreeBuilder;

}).call(this);
