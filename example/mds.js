// Generated by CoffeeScript 1.7.1
(function() {
  var Distance, MDS;

  MDS = (function() {
    function MDS() {}

    MDS.pca = function(matrix) {
      var X, pts, svd;
      X = numeric.transpose(numeric.transpose(matrix).map(function(r) {
        var mean;
        mean = 1.0 * numeric.sum(r) / r.length;
        return numeric.sub(r, mean);
      }));
      svd = this._svd(X);
      pts = numeric.dot(X, svd.V);
      pts = numeric.dot(pts, numeric.diag(svd.S));
      return {
        points: pts,
        eigenvalues: svd.S
      };
    };

    MDS._svd = function(m) {
      var ncol, nrow, r, _ref, _ref1;
      _ref = numeric.dim(m), nrow = _ref[0], ncol = _ref[1];
      if (nrow >= ncol) {
        return numeric.svd(m);
      } else {
        r = numeric.svd(numeric.transpose(m));
        _ref1 = [r.V, r.U], r.U = _ref1[0], r.V = _ref1[1];
        return r;
      }
    };

    MDS.pca_gene = function(mat, gene_range) {
      var g, matrix, r, row, s, t1, _i, _j, _ref, _ref1, _ref2;
      t1 = new Date;
      matrix = [];
      for (s = _i = 0, _ref = mat.strains().length; 0 <= _ref ? _i < _ref : _i > _ref; s = 0 <= _ref ? ++_i : --_i) {
        matrix.push(row = []);
        for (g = _j = _ref1 = gene_range[0], _ref2 = gene_range[1]; _ref1 <= _ref2 ? _j <= _ref2 : _j >= _ref2; g = _ref1 <= _ref2 ? ++_j : --_j) {
          row.push(mat.presence(s, g));
        }
      }
      r = this.pca(matrix);
      console.log("SVD took : " + (new Date - t1) + "ms");
      return r;
    };

    MDS.prototype.test = function() {
      var m;
      m = [1, 2, 3, 4, 5].map(function(r) {
        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15].map(function(c) {
          return (r + c) % 7 === 0;
        });
      });
      console.log(numeric.dim(m));
      return console.log(MDS.pca(m));
    };

    return MDS;

  })();

  Distance = (function() {
    function Distance() {}

    Distance.distance = function(mat, gene_range) {
      var d, dist, g, s1, s2, t1, _i, _j, _k, _ref, _ref1, _ref2;
      t1 = new Date;
      dist = [];
      for (s1 = _i = 0, _ref = mat.strains().length; 0 <= _ref ? _i < _ref : _i > _ref; s1 = 0 <= _ref ? ++_i : --_i) {
        (dist[s1] || (dist[s1] = []))[s1] = 0;
        for (s2 = _j = 0; 0 <= s1 ? _j < s1 : _j > s1; s2 = 0 <= s1 ? ++_j : --_j) {
          d = 0;
          for (g = _k = _ref1 = gene_range[0], _ref2 = gene_range[1]; _ref1 <= _ref2 ? _k <= _ref2 : _k >= _ref2; g = _ref1 <= _ref2 ? ++_k : --_k) {
            d += Math.abs(mat.presence(s1, g) - mat.presence(s2, g));
          }
          (dist[s1] || (dist[s1] = []))[s2] = d;
          (dist[s2] || (dist[s2] = []))[s1] = d;
        }
      }
      our_log("Distance took : " + (new Date - t1) + "ms");
      return dist;
    };

    return Distance;

  })();

  this.MDS = MDS;

  this.Distance = Distance;

}).call(this);
