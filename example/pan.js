// Generated by CoffeeScript 1.7.1
(function() {
  var DendrogramWrapper, LatestWorker, MDSHandler, Pan, StrainInfo, ThinkingElement, add_gene_order, get_stem, init, load_desc, load_json, load_strains, parse_proteinortho, setup_download;

  LatestWorker = (function() {
    function LatestWorker(worker, get_current_data) {
      this.worker = worker;
      this.get_current_data = get_current_data;
      this.dispatch = d3.dispatch("started", "updated");
      this._computing = 0;
      this._last_data = null;
      this.worker.addEventListener('message', (function(_this) {
        return function(ev) {
          return _this.done(ev.data);
        };
      })(this));
    }

    LatestWorker.prototype.on = function(t, func) {
      return this.dispatch.on(t, func);
    };

    LatestWorker.prototype.update = function() {
      var cur_data;
      if (!this._computing) {
        cur_data = this.get_current_data();
        if (!this.deep_cmp(cur_data, this._last_data)) {
          this._computing = 1;
          this._last_data = cur_data;
          this.dispatch.started();
          return this.worker.postMessage({
            msg: cur_data
          });
        }
      }
    };

    LatestWorker.prototype.deep_cmp = function(a, b) {
      return JSON.stringify(a) === JSON.stringify(b);
    };

    LatestWorker.prototype.done = function(res) {
      this._computing = 0;
      this.dispatch.updated(res);
      return this.update();
    };

    return LatestWorker;

  })();

  ThinkingElement = (function() {
    function ThinkingElement(main_elem, think_elem) {
      this.main_elem = main_elem;
      this.think_elem = think_elem;
    }

    ThinkingElement.prototype.start = function() {
      return this.background_runner = window.setTimeout((function(_this) {
        return function() {
          $(_this.think_elem).show();
          return $(_this.main_elem).css('opacity', '0.3');
        };
      })(this), 500);
    };

    ThinkingElement.prototype.done = function() {
      window.clearTimeout(this.background_runner);
      $(this.think_elem).hide();
      return $(this.main_elem).css('opacity', '1.0');
    };

    return ThinkingElement;

  })();

  MDSHandler = (function() {
    function MDSHandler(matrix, think_elem) {
      var worker;
      this.matrix = matrix;
      this.think_elem = think_elem;
      this.dispatch = d3.dispatch("redraw");
      this._current_range = null;
      worker = new Worker('mds-worker.js');
      worker.postMessage({
        init: this.matrix.as_hash()
      });
      this.latest_worker = new LatestWorker(worker, (function(_this) {
        return function() {
          return {
            mds: _this._current_range
          };
        };
      })(this));
      this.latest_worker.on('updated', (function(_this) {
        return function(comp) {
          return _this.redraw(comp);
        };
      })(this));
      this.latest_worker.on('started.think', (function(_this) {
        return function() {
          return _this.think_elem.start();
        };
      })(this));
      this.latest_worker.on('updated.think', (function(_this) {
        return function() {
          return _this.think_elem.done();
        };
      })(this));
    }

    MDSHandler.prototype.on = function(t, func) {
      return this.dispatch.on(t, func);
    };

    MDSHandler.prototype.enable_sort = function(enable) {
      this.sort_enabled = enable;
      return this.reorder();
    };

    MDSHandler.prototype.update = function(range) {
      var ngenes;
      ngenes = this.matrix.genes().length;
      if (range == null) {
        range = [0, ngenes - 1];
      }
      range = [Math.floor(range[0]), Math.min(Math.ceil(range[1]), ngenes - 1)];
      this._current_range = range;
      return this.latest_worker.update();
    };

    MDSHandler.prototype.redraw = function(comp) {
      this.last_comp = comp;
      this.dispatch.redraw(comp);
      return this.reorder();
    };

    MDSHandler.prototype.redispatch = function() {
      return this.dispatch.redraw(this.last_comp);
    };

    MDSHandler.prototype.reorder = function() {
      var comp;
      if ((this.last_comp != null) && this.sort_enabled) {
        comp = this.last_comp;
        window.clearTimeout(this.background_runner);
        return this.background_runner = window.setTimeout((function(_this) {
          return function() {
            var ids, pts;
            ids = _this.matrix.strains().map(function(s) {
              return s.id;
            });
            pts = numeric.transpose(comp.points);
            ids.sort(function(a, b) {
              return pts[0][a] - pts[0][b];
            });
            return _this.matrix.set_strain_order(ids);
          };
        })(this), 1000);
      }
    };

    return MDSHandler;

  })();

  DendrogramWrapper = (function() {
    function DendrogramWrapper(widget, matrix, think_elem) {
      var worker;
      this.widget = widget;
      this.matrix = matrix;
      this.think_elem = think_elem;
      this._current_range = null;
      worker = new Worker('mds-worker.js');
      worker.postMessage({
        init: this.matrix.as_hash()
      });
      this.latest_worker = new LatestWorker(worker, (function(_this) {
        return function() {
          return {
            dist: _this._current_range
          };
        };
      })(this));
      this.latest_worker.on('updated', (function(_this) {
        return function(d) {
          return _this._calc_done(d);
        };
      })(this));
      this.latest_worker.on('started.think', (function(_this) {
        return function() {
          return _this.think_elem.start();
        };
      })(this));
      this.latest_worker.on('updated.think', (function(_this) {
        return function() {
          return _this.think_elem.done();
        };
      })(this));
      this.typ = 'radial';
      this.colours = [];
    }

    DendrogramWrapper.prototype.set_type = function(typ) {
      this.typ = typ;
    };

    DendrogramWrapper.prototype.set_colours = function(colours) {
      this.colours = colours;
    };

    DendrogramWrapper.prototype.update = function(range) {
      var ngenes;
      ngenes = this.matrix.genes().length;
      if (range == null) {
        range = [0, ngenes - 1];
      }
      range = [Math.floor(range[0]), Math.min(Math.ceil(range[1]), ngenes - 1)];
      this._current_range = range;
      return this.latest_worker.update();
    };

    DendrogramWrapper.prototype._calc_done = function(dist_arr) {
      this.tree = new TreeBuilder(dist_arr);
      return this.redraw();
    };

    DendrogramWrapper.prototype.redraw = function() {
      var strain_info;
      strain_info = this.matrix.strains().map((function(_this) {
        return function(s, i) {
          return {
            text: s.name,
            colour: _this.colours[i] || 'black',
            clazz: "strain-" + s.id,
            strain: s
          };
        };
      })(this));
      return this.widget.draw(this.typ, this.tree, strain_info);
    };

    return DendrogramWrapper;

  })();

  Pan = (function() {
    Pan.prototype.brushed = function(brush) {
      var diff, ex, sc;
      ex = brush.extent();
      diff = ex[1] - ex[0];
      if (diff === 0) {
        this.reset_scale();
        this.mds.update(null);
        this.dendrogram.update(null);
      } else if (diff > 1) {
        sc = this.width / diff;
        this.set_scale(ex[0], sc);
        this.mds.update(ex);
        this.dendrogram.update(ex);
      }
      if (diff <= 300) {
        return this.draw_gaps(ex);
      } else {
        return this.hide_gaps();
      }
    };

    Pan.prototype.set_scale = function(pos, sc) {
      if (pos == null) {
        pos = this.last_pos;
        sc = this.last_sc;
      }
      this.last_pos = pos;
      this.last_sc = sc;
      this.svg.selectAll(".scale").attr("transform", "translate(" + (-pos * sc) + ",0) scale(" + sc + "," + this.vscale + ")");
      return this.svg.selectAll(".label-scale").attr("transform", "scale(1," + this.vscale + ")");
    };

    Pan.prototype.reset_scale = function() {
      return this.set_scale(0, this.width / (this.bw * this.matrix.genes().length));
    };

    Pan.prototype.detail_off = function() {
      this.tooltip.style("display", "none");
      return this.unhighlight();
    };

    Pan.prototype._detail_position = function(e) {
      var b_edge, h, r_edge, w, x, y, _ref;
      _ref = [d3.event.pageX, d3.event.pageY], x = _ref[0], y = _ref[1];
      r_edge = $(this.elem).offset().left + $(this.elem).width();
      b_edge = $(this.elem).offset().top + $(this.elem).height();
      w = e[0][0].offsetWidth;
      h = e[0][0].offsetHeight;
      if (x + w > r_edge) {
        x = x - w;
      }
      if (y + h > b_edge) {
        y = y - h;
      }
      return e.style('left', x + "px").style('top', y + "px");
    };

    Pan.prototype.detail = function() {
      var col, desc, desc_pri, gene, gene_name_pri, gene_name_strain, num_present, p, row, strain, strain_id, txt, x, y, _ref;
      _ref = d3.mouse(this.focus.node()), x = _ref[0], y = _ref[1];
      row = Math.floor(y / this.bh);
      col = Math.floor(x / this.bw);
      strain_id = this.matrix.strain_pos_to_id(row);
      gene = this.matrix.genes_by_pos()[col];
      if ((gene == null) || (strain_id == null)) {
        return;
      }
      strain = this.matrix.strains()[strain_id];
      this.unhighlight();
      this.highlight(strain);
      p = this.matrix.presence(strain_id, gene.id);
      gene_name_pri = this.matrix.gene_name(gene.id);
      gene_name_strain = this.matrix.strain_gene_name(strain_id, gene.id);
      desc_pri = this.matrix.get_desc_non_hypot(gene.id);
      desc = this.matrix.get_desc(gene_name_strain);
      num_present = this.matrix.count_presence(gene.id);
      txt = "<table>\n<tr><th>Strain:<td>" + strain.name + "\n<tr><th>Gene (pri):<td> " + gene_name_pri + "\n<tr><th>Gene:<td> " + gene_name_strain + "\n<tr><th>Present:<td>" + p + "\n<tr><th>Desc (pri):<td>" + desc_pri + "\n<tr><th>Desc:<td>" + desc + "\n<tr><th>Strains with gene:<td>" + num_present + " of " + (this.matrix.strains().length) + "\n<tr><th>Pos:<td>" + gene.pos + "\n</table>";
      this.tooltip.style("display", "block").select("#tooltip-text").html(txt);
      return this._detail_position(this.tooltip);
    };

    Pan.prototype.dendrogram_mouseover = function(_arg) {
      var d, leaves, nodes, str;
      leaves = _arg[0], d = _arg[1], nodes = _arg[2];
      this.tooltip = d3.select("#tooltip");
      if (leaves != null) {
        this.mds_brushed(leaves.map(function(n) {
          return n.strain;
        }));
        if (nodes.length > 0) {
          d3.selectAll(nodes.join(',')).classed({
            'brushed': true
          });
        }
        str = leaves.length === 1 ? "<b>Name:</b>" + leaves[0].strain.name : "<b>Selected:</b>" + leaves.length;
        return this.tooltip.style("display", "block").style("left", d3.event.pageX + "px").style("top", d3.event.pageY + "px").select("#tooltip-text").html("" + str + "<br/><b>Dist:</b>" + d.dist);
      } else {
        this.mds_brushed([]);
        return this.tooltip.style("display", "none");
      }
    };

    Pan.prototype.create_elems = function() {
      var brush, defs, main, margin, margin2, tot_height, tot_width;
      tot_width = $(this.elem).width();
      tot_height = this.bh * this.matrix.strains().length + 200;
      margin = {
        top: 150,
        right: 10,
        bottom: 10,
        left: 140
      };
      margin2 = {
        top: 30,
        right: margin.right,
        bottom: tot_height - 100,
        left: margin.left
      };
      this.width = tot_width - margin.left - margin.right;
      this.height = tot_height - margin.top - margin.bottom;
      this.height2 = tot_height - margin2.top - margin2.bottom;
      this.x2 = d3.scale.linear().range([0, this.width]);
      this.xAxis2 = d3.svg.axis().scale(this.x2).orient("bottom");
      brush = d3.svg.brush();
      brush.x(this.x2).on("brush", (function(_this) {
        return function() {
          return _this.brushed(brush);
        };
      })(this));
      this.svg = d3.select(this.elem).append("svg").attr("width", tot_width).attr("height", tot_height);
      defs = this.svg.append("svg:defs");
      defs.append("svg:clipPath").attr("id", "draw-region").append('rect').attr('width', this.width).attr('height', this.height).attr('x', 0).attr('y', 0);
      defs.append("marker").attr("id", "arrowhead").attr("viewBox", "0 0 10 10").attr("refX", "1").attr("refY", "5").attr("markerUnits", "strokeWidth").attr("orient", "auto").attr("markerWidth", "4").attr("markerHeight", "3").append("polyline").attr("points", "0,0 10,5 0,10 1,5").attr("fill", "red");
      main = this.svg.append("g").attr("clip-path", "url(#draw-region)").attr("transform", "translate(" + margin.left + "," + margin.top + ")").append("g").attr("transform", "translate(0,0)scale(1,1)").attr("class", "scale").on("mousemove", (function(_this) {
        return function() {
          return _this.detail();
        };
      })(this)).on("mouseout", (function(_this) {
        return function() {
          return _this.detail_off();
        };
      })(this));
      this.focus = main.append("g");
      this.gene_gaps = main.append("g").attr("class", "gene-gap");
      this.context = this.svg.append("g").attr("transform", "translate(" + margin2.left + "," + margin2.top + ")");
      this.mini = this.context.append("g").attr("class", "minimap").attr("transform", "translate(0,0) scale(" + (this.width / (this.bw * this.matrix.genes().length)) + ", " + (this.height2 / (this.bh * this.matrix.strains().length)) + ")");
      this.mini.append("g").attr("class", "arrow").attr("transform", "translate(0,0)").attr("display", "none").append("g").attr("transform", "scale(" + (0.5 * (this.bw * this.matrix.genes().length) / this.width) + ", " + (0.5 * (this.bh * this.matrix.strains().length) / this.height2) + ")").append('line').attr('class', 'pointer').attr("marker-end", "url(#arrowhead)").attr('x1', 0).attr('x2', 0).attr('y1', -50).attr('y2', -25).style('stroke', 'red').style('stroke-width', 10);
      this.context.append("g").attr("class", "x axis").attr("transform", "translate(0," + this.height2 + ")").call(this.xAxis2);
      this.context.append("g").attr("class", "x brush").call(brush).selectAll("rect").attr("y", -6).attr("height", this.height2 + 7);
      this.labels = this.svg.append("g").attr("transform", "translate(" + (margin.left - 10) + "," + margin.top + ")").append("g").attr('class', 'label-scale').attr("transform", "scale(1," + this.vscale + ")");
      return this.tooltip = d3.select("#tooltip");
    };

    Pan.prototype.collapse_off = function(strain_id) {
      var last_p, res;
      res = [];
      last_p = 1;
      this.matrix.genes_by_pos().forEach((function(_this) {
        return function(g) {
          var p;
          p = _this.matrix.presence(strain_id, g.id);
          if (!p) {
            if (last_p) {
              res.push({
                x: g.pos,
                len: 0
              });
            }
            res[res.length - 1].len += 1;
          }
          return last_p = p;
        };
      })(this));
      return res;
    };

    Pan.prototype.clear_boxes = function() {
      this.mini.selectAll('g.gene-row').remove();
      this.focus.selectAll('g.gene-row').remove();
      return this._hide_gene_pointer();
    };

    Pan.prototype.draw_boxes = function(elem) {
      var ngs, row;
      row = elem.selectAll('g.gene-row').data(this.matrix.strains(), function(s) {
        return s.id;
      });
      row.exit().remove();
      ngs = row.enter().append('g').attr('class', function(s) {
        return "gene-row strain-" + s.id;
      }).on('click', (function(_this) {
        return function(s) {
          return _this.matrix.set_first(s.id);
        };
      })(this));
      ngs.append('rect').attr('class', 'on').attr('width', this.bw * this.matrix.genes().length).attr('height', this.bh - 1);
      ngs.selectAll('rect.off').data((function(_this) {
        return function(s) {
          return _this.collapse_off(s.id);
        };
      })(this)).enter().append('rect').attr('class', 'off').attr('height', this.bh - 1).attr('x', function(p) {
        return p.x;
      }).attr('width', (function(_this) {
        return function(p) {
          return _this.bw * p.len;
        };
      })(this));
      return row.transition().attr('transform', (function(_this) {
        return function(s) {
          return "translate(0," + (s.pos * _this.bh) + ")";
        };
      })(this));
    };

    Pan.prototype.show_strain_info = function(s) {
      var info, k, str, txt, v;
      if (s == null) {
        this.tooltip.style("display", "none");
        return;
      }
      info = this.strains.find_strain_by_name(s.name);
      window.xx = info;
      str = "";
      for (k in info) {
        v = info[k];
        if (k !== 'id' && k !== 'name') {
          str += "<tr><th>" + k + "<td>" + info[k];
        }
      }
      txt = "<table>\n<tr><th>Strain:<td>" + s.name + "\n" + str + "\n</table>";
      this.tooltip.style("display", "block").select("#tooltip-text").html(txt);
      return this._detail_position(this.tooltip);
    };

    Pan.prototype.draw_labels = function(elem) {
      var lbls;
      lbls = elem.selectAll('text.label').data(this.matrix.strains(), function(s) {
        return s.id;
      });
      lbls.enter().append('text').attr('class', function(s) {
        return "label strain-" + s.id;
      }).attr('text-anchor', 'end').text(function(s) {
        return s.name;
      }).on('click', (function(_this) {
        return function(s) {
          return _this.matrix.set_first(s.id);
        };
      })(this)).on("mouseover", (function(_this) {
        return function(s) {
          _this.highlight(s);
          return _this.show_strain_info(s);
        };
      })(this)).on("mouseout", (function(_this) {
        return function(s) {
          _this.unhighlight();
          return _this.show_strain_info(null);
        };
      })(this));
      return lbls.transition().attr('y', (function(_this) {
        return function(s) {
          return (s.pos + 1) * _this.bh - 1;
        };
      })(this));
    };

    Pan.prototype.hide_gaps = function() {
      return this.gene_gaps.selectAll('line.gene-gap').remove();
    };

    Pan.prototype.draw_gaps = function(ex) {
      var col, in_range;
      in_range = this.matrix.genes_by_pos().filter(function(g) {
        return g.pos >= ex[0] && g.pos <= ex[1];
      });
      col = this.gene_gaps.selectAll('line.gene-gap').data(in_range, (function(g) {
        return g.pos;
      }));
      col.exit().remove();
      return col.enter().append('line').attr('class', 'gene-gap').attr('x1', (function(_this) {
        return function(g, i) {
          return g.pos;
        };
      })(this)).attr('x2', (function(_this) {
        return function(g, i) {
          return g.pos;
        };
      })(this)).attr('y1', 0).attr('y2', this.bh * this.matrix.strains().length).style('stroke', 'white').style('stroke-width', '0.1');
    };

    Pan.prototype._hide_gene_pointer = function() {
      var arrow;
      arrow = this.context.selectAll("g.arrow").attr('display', 'none');
      return this.focus.selectAll('line.pointer').remove();
    };

    Pan.prototype._show_gene_pointer = function(gene) {
      var arrow, pointer;
      arrow = this.context.selectAll("g.arrow").data([1]);
      arrow.attr('transform', "translate(" + gene.pos + "+0.5)").attr('display', null);
      pointer = this.focus.selectAll('line.pointer').data([1]);
      pointer.enter().append('line').attr('class', 'pointer');
      return pointer.attr('x1', gene.pos + 0.5).attr('x2', gene.pos + 0.5).attr('y1', 0).attr('y2', this.bh * this.matrix.strains().length).style('stroke', 'red').style('stroke-width', 1).style('opacity', 0.8);
    };

    Pan.prototype.redraw = function() {
      this.draw_boxes(this.mini);
      this.draw_boxes(this.focus);
      return this.draw_labels(this.labels);
    };

    Pan.prototype.draw_chart = function() {
      this.x2.domain([0, this.matrix.genes().length]);
      this.context.select(".x.axis").call(this.xAxis2);
      this.redraw();
      return this.reset_scale();
    };

    Pan.prototype.highlight = function(strain) {
      d3.selectAll(".strain-" + strain.id).classed({
        'highlight': true
      });
      return this.scatter.highlight("strain-" + strain.id);
    };

    Pan.prototype.unhighlight = function() {
      d3.selectAll(".highlight").classed({
        'highlight': false
      });
      return this.scatter.unhighlight();
    };

    Pan.prototype.mds_brushed = function(strains) {
      d3.selectAll(".brushed").classed({
        'brushed': false
      });
      if (strains) {
        return strains.map(function(strain) {
          return d3.selectAll(".strain-" + strain.id).classed({
            'brushed': true
          });
        });
      }
    };

    function Pan(elem, matrix, strains) {
      var dendrogramWidget;
      this.elem = elem;
      this.matrix = matrix;
      this.strains = strains;
      this.bw = 1;
      this.bh = 10;
      this.vscale = 1.0;
      this.create_elems();
      this.draw_chart();
      this.matrix.on('order_changed', (function(_this) {
        return function() {
          return _this.redraw();
        };
      })(this));
      this.mdsDimension = 1;
      this.mdsBarGraph = new BarGraph({
        elem: '#mds-bargraph',
        click: (function(_this) {
          return function(d) {
            _this.mdsDimension = +d.lbl;
            return _this.mds.redispatch();
          };
        })(this)
      });
      this.scatter = new ScatterPlot({
        elem: '#mds',
        width: 500,
        height: 399,
        left: 50,
        click: (function(_this) {
          return function(s) {
            return _this.matrix.set_first(s.id);
          };
        })(this),
        mouseover: (function(_this) {
          return function(s) {
            return _this.highlight(s);
          };
        })(this),
        mouseout: (function(_this) {
          return function(s) {
            return _this.unhighlight();
          };
        })(this),
        brush: (function(_this) {
          return function(s) {
            return _this.mds_brushed(s);
          };
        })(this)
      });
      this.mds = new MDSHandler(this.matrix, new ThinkingElement('#mds', '#mds-thinking'));
      this.mds.on('redraw', (function(_this) {
        return function(comp) {
          var eigen_total, points;
          points = numeric.transpose(comp.points);
          _this.scatter.draw(points, _this.matrix.strains(), [_this.mdsDimension - 1, _this.mdsDimension]);
          eigen_total = d3.sum(comp.eigenvalues);
          return _this.mdsBarGraph.draw(comp.eigenvalues.slice(0, 10).map(function(v, i) {
            return {
              lbl: "" + (i + 1),
              val: v / eigen_total
            };
          }));
        };
      })(this));
      this.mds.update(null);
      dendrogramWidget = new Dendrogram({
        elem: '#dendrogram',
        width: 600,
        height: 400,
        radius: 100,
        mouseover: (function(_this) {
          return function(d) {
            return _this.dendrogram_mouseover(d);
          };
        })(this),
        mouseout: (function(_this) {
          return function() {
            return _this.dendrogram_mouseover([]);
          };
        })(this)
      });
      this.dendrogram = new DendrogramWrapper(dendrogramWidget, this.matrix, new ThinkingElement('#dendrogram', '#dendrogram-thinking'));
      this.dendrogram.set_type($('select#dendrogram-type option:selected').val());
      this.dendrogram.update(null);
      this._init_search();
      $('input#vscale').on('keyup', (function(_this) {
        return function(e) {
          var str, val;
          str = $(e.target).val();
          val = parseFloat(str);
          if (val > 0 && val < 2) {
            _this.vscale = val;
            return _this.set_scale();
          }
        };
      })(this));
      $('select#strain-colour').on('change', (function(_this) {
        return function(e) {
          var v;
          v = $(e.target).val();
          return _this.colour_by(v);
        };
      })(this));
      $('select#strain-sort').on('change', (function(_this) {
        return function(e) {
          _this.sort_order = $(e.target).val();
          return _this.reorder();
        };
      })(this));
      $('select#dendrogram-type').on('change', (function(_this) {
        return function(e) {
          var v;
          v = $(e.target).val();
          _this.dendrogram.set_type(v);
          return _this.dendrogram.redraw();
        };
      })(this));
      $('select#gene-order').on('change', (function(_this) {
        return function(e) {
          var order;
          order = $('option:selected', e.target).data('order');
          _this.matrix.set_gene_order(order);
          _this.clear_boxes();
          return _this.redraw();
        };
      })(this));
      this.sort_order = $('select#strain-sort option:selected').val();
      this.reorder();
    }

    Pan.prototype.make_colour_legend = function(scale, fld) {
      var elem, vals;
      vals = scale.domain().sort();
      elem = d3.select('#colour-legend');
      elem.html('');
      if (vals.length === 0) {
        return;
      }
      elem.append('div').attr('class', 'title').text("Colour legend : " + fld);
      return elem.selectAll('div.elem').data(vals).enter().append('div').attr('class', 'elem').style('color', function(v) {
        return scale(v);
      }).text(function(v) {
        return v;
      }).append('div').attr('class', 'box').style('background-color', function(v) {
        return scale(v);
      });
    };

    Pan.prototype.colour_by = function(fld) {
      var col, s, scale, strain_colour, strains, _i, _len;
      scale = d3.scale.category10();
      strains = this.strains.as_array();
      strain_colour = [];
      for (_i = 0, _len = strains.length; _i < _len; _i++) {
        s = strains[_i];
        col = fld === 'none' ? '' : scale(s[fld]);
        $(".strain-" + s.id + " rect.on").css('fill', col);
        $(".label.strain-" + s.id).css('fill', col);
        $(".mds-scatter .labels.strain-" + s.id).css('fill', col);
        $(".mds-scatter .dot.strain-" + s.id).css('fill', col);
        strain_colour[s.id] = col;
      }
      this.make_colour_legend(scale, fld);
      this.dendrogram.set_colours(strain_colour);
      return this.dendrogram.redraw();
    };

    Pan.prototype.reorder = function() {
      var fld, ids, strains;
      if (this.sort_order === 'mds') {
        return this.mds.enable_sort(true);
      } else {
        this.mds.enable_sort(false);
        fld = this.sort_order;
        strains = this.strains.as_array();
        if (fld === 'fixed') {
          strains.sort(function(a, b) {
            return a.id - b.id;
          });
        } else {
          strains.sort(function(a, b) {
            return a[fld].localeCompare(b[fld]);
          });
        }
        ids = strains.map(function(s) {
          return s.id;
        });
        return this.matrix.set_strain_order(ids);
      }
    };

    Pan.prototype.resize = function() {
      this.svg.remove();
      this.create_elems();
      return this.draw_chart();
    };

    Pan.prototype._init_search = function() {
      return $("#search").autocomplete({
        source: (function(_this) {
          return function(req, resp) {
            var lst;
            lst = _this.matrix.search_gene(req.term, 20);
            return resp(lst);
          };
        })(this)
      }, {
        focus: (function(_this) {
          return function(event, ui) {
            console.log("Showing", ui.item);
            _this._show_gene_pointer(ui.item.value);
            $("#search").val(ui.item.label);
            return false;
          };
        })(this),
        select: (function(_this) {
          return function(event, ui) {
            console.log("Showing", ui.item);
            _this._show_gene_pointer(ui.item.value);
            return false;
          };
        })(this)
      });
    };

    return Pan;

  })();

  parse_proteinortho = function(tsv) {
    var genes, i, row, strains, values, _i, _len;
    strains = [];
    values = [];
    genes = [];
    i = 0;
    for (_i = 0, _len = tsv.length; _i < _len; _i++) {
      row = tsv[_i];
      i += 1;
      if (i === 1) {
        strains = d3.keys(row).slice(3).map(function(s) {
          return {
            name: s
          };
        });
      }
      genes.push({
        name: "cluster" + i,
        desc: ""
      });
      values.push(strains.map(function(s) {
        if (row[s.name] === '*') {
          return null;
        } else {
          return row[s.name];
        }
      }));
    }
    return new GeneMatrix(strains, genes, d3.transpose(values));
  };

  get_stem = function() {
    return get_url_params() || 'pan';
  };

  load_json = function(matrix) {
    return d3.json("" + (get_stem()) + ".json", function(err, json) {
      var gene, row, strain, strains, _i, _len, _results;
      if (err) {
        console.log("Missing '" + (get_stem()) + ".json', trying deprecated .descriptions file");
        return load_desc(matrix);
      } else {
        strains = d3.keys(json).sort();
        _results = [];
        for (_i = 0, _len = strains.length; _i < _len; _i++) {
          strain = strains[_i];
          row = json[strain];
          add_gene_order(strain, row);
          _results.push((function() {
            var _j, _len1, _results1;
            _results1 = [];
            for (_j = 0, _len1 = row.length; _j < _len1; _j++) {
              gene = row[_j];
              _results1.push(matrix.set_desc(gene.name, gene.desc + (" length:" + gene.length)));
            }
            return _results1;
          })());
        }
        return _results;
      }
    });
  };

  add_gene_order = function(strain, genes) {
    var elem, opt;
    opt = "<option value=\"" + strain + "\">" + strain + "</option>";
    elem = $(opt).appendTo('select#gene-order');
    return elem.data('order', genes.map(function(g) {
      return g.name;
    }));
  };

  load_desc = function(matrix) {
    return d3.text("" + (get_stem()) + ".descriptions", function(data) {
      var lines;
      if (data == null) {
        return;
      }
      lines = data.split("\n");
      return lines.forEach(function(l) {
        var match;
        if (l.match(/^\s*$/)) {
          return;
        }
        match = /^(.*?)\t(.*)$/.exec(l);
        if (match) {
          return matrix.set_desc(match[1], match[2]);
        } else {
          return console.log("BAD LINE: " + l);
        }
      });
    });
  };

  load_strains = function(strainInfo) {
    return d3.tsv("" + (get_stem()) + ".strains", function(data) {
      var c, opt, _i, _len, _ref, _results;
      if (data == null) {
        return;
      }
      strainInfo.set_info(data);
      if (strainInfo.columns.length > 0) {
        opt = "<option disabled>──────────</option>";
        $('select#strain-sort').append(opt);
        $('select#strain-colour').append(opt);
      }
      _ref = strainInfo.columns;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        c = _ref[_i];
        opt = "<option value=\"" + c + "\">" + c + "</option>";
        $('select#strain-sort').append(opt);
        _results.push($('select#strain-colour').append(opt));
      }
      return _results;
    });
  };

  StrainInfo = (function() {
    function StrainInfo(strains) {
      this.strains = strains;
    }

    StrainInfo.prototype.as_array = function() {
      return this.strains.slice(0);
    };

    StrainInfo.prototype.find_strain_by_name = function(name) {
      return this.strains.filter(function(s) {
        return s.name === name;
      })[0];
    };

    StrainInfo.prototype.set_info = function(matrix) {
      var c, row, s, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _results;
      this.matrix = matrix;
      this.columns = d3.keys(this.matrix[0]);
      if ('ID' !== this.columns.shift()) {
        log_error("No ID column in " + (get_stem()) + ".strains");
        this.columns = [];
        return;
      }
      _ref = this.strains;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        s = _ref[_i];
        _ref1 = this.columns;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          c = _ref1[_j];
          s[c] = '_not-set_';
        }
      }
      console.log("Read info on " + this.matrix.length + ".  Columns=" + this.columns);
      _ref2 = this.matrix;
      _results = [];
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        row = _ref2[_k];
        s = this.find_strain_by_name(row['ID']);
        if (s == null) {
          _results.push(console.log("Unable to find strain for " + row['ID']));
        } else {
          _results.push((function() {
            var _l, _len3, _ref3, _results1;
            _ref3 = this.columns;
            _results1 = [];
            for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
              c = _ref3[_l];
              _results1.push(s[c] = row[c]);
            }
            return _results1;
          }).call(this));
        }
      }
      return _results;
    };

    return StrainInfo;

  })();

  setup_download = function(sel) {
    return d3.selectAll(".svg-download").on("mousedown", function(e) {
      return download_svg(d3.event.target);
    });
  };

  init = function() {
    var url;
    document.title = "FriPan : " + (get_stem());
    $(".hdr").append("<span class='title'>: " + (get_stem()) + "</span>");
    url = "" + (get_stem()) + ".proteinortho";
    return d3.tsv(url, function(data) {
      var matrix, pan, strains;
      if (data == null) {
        $('#chart').text("Unable to load : " + url);
        return;
      }
      $('#chart').html('');
      matrix = parse_proteinortho(data);
      strains = new StrainInfo(matrix.strains().map(function(s) {
        return {
          name: s.name,
          id: s.id
        };
      }));
      load_json(matrix);
      load_strains(strains);
      d3.select("#topinfo").html("<b>Strains</b>: " + (matrix.strains().length) + "  <b>gene clusters</b>:" + (matrix.genes().length));
      pan = new Pan('#chart', matrix, strains);
      $(window).resize(function() {
        return pan.resize();
      });
      return setup_download(".svg_download");
    });
  };

  $(document).ready(function() {
    add_browser_warning();
    return init();
  });

}).call(this);
