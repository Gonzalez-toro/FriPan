// Generated by CoffeeScript 1.7.1
(function() {
  var GeneMatrix;

  GeneMatrix = (function() {
    function GeneMatrix(_strains, _genes, _values) {
      this._strains = _strains;
      this._genes = _genes;
      this._values = _values;
      this._strains.forEach(function(s, i) {
        return s.id = s.pos = i;
      });
      this._genes.forEach(function(g, i) {
        return g.id = g.pos = i;
      });
      this._desc = {};
      if (typeof d3 !== "undefined" && d3 !== null) {
        this.dispatch = d3.dispatch("order_changed");
      }
      this._build_gene_name_idx();
    }

    GeneMatrix.prototype.as_hash = function() {
      return {
        strains: this._strains,
        genes: this._genes,
        values: this._values,
        desc: this._desc
      };
    };

    GeneMatrix.from_hash = function(hsh) {
      var res;
      res = new GeneMatrix(hsh.strains, hsh.genes, hsh.values);
      res._desc = hsh.desc;
      return res;
    };

    GeneMatrix.prototype.on = function(t, func) {
      return this.dispatch.on(t, func);
    };

    GeneMatrix.prototype._build_gene_name_idx = function() {
      var gene_name_map;
      gene_name_map = {};
      this._values.forEach(function(row) {
        return row.forEach(function(g, idx) {
          var names;
          if (g != null) {
            names = g.split(',');
            return names.forEach(function(n) {
              return gene_name_map[n] = idx;
            });
          }
        });
      });
      return this._gene_name_id = gene_name_map;
    };

    GeneMatrix.prototype.strains = function() {
      return this._strains;
    };

    GeneMatrix.prototype.strain_pos_to_id = function(pos) {
      return this._strain_pos[pos];
    };

    GeneMatrix.prototype.genes = function() {
      return this._genes;
    };

    GeneMatrix.prototype.genes_by_pos = function() {
      if (this._genes_by_pos == null) {
        this._genes_by_pos = this._genes.slice();
        this._genes_by_pos.sort(function(g1, g2) {
          return g1.pos - g2.pos;
        });
      }
      return this._genes_by_pos;
    };

    GeneMatrix.prototype.set_gene_order = function(gene_names) {
      var new_pos;
      console.log("Ordering genes.  Genes specified:" + gene_names.length);
      this._genes.forEach(function(g) {
        return g.pos = -1;
      });
      new_pos = 0;
      gene_names.forEach((function(_this) {
        return function(n) {
          var gene, id;
          id = _this._gene_name_id[n];
          if (id == null) {
            return console.log("Unable to find gene '" + n + "'");
          } else {
            gene = _this._genes[id];
            if (gene.pos < 0) {
              gene.pos = new_pos;
              return new_pos += 1;
            }
          }
        };
      })(this));
      this._genes.forEach(function(g) {
        if (g.pos < 0) {
          g.pos = new_pos;
          return new_pos += 1;
        }
      });
      return this._genes_by_pos = null;
    };

    GeneMatrix.prototype.presence = function(strain_id, gene_id) {
      return this._values[strain_id][gene_id] != null;
    };

    GeneMatrix.prototype.count_presence = function(gene_id) {
      var tot;
      tot = 0;
      this._values.forEach(function(row) {
        if (row[gene_id] != null) {
          return tot += 1;
        }
      });
      return tot;
    };

    GeneMatrix.prototype.strain_gene_name = function(strain_id, gene_id) {
      return this._values[strain_id][gene_id];
    };

    GeneMatrix.prototype.search_gene = function(str, max) {
      var i, j, n, res, _i, _j, _len, _ref, _ref1;
      res = [];
      _ref = this._strain_pos;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        for (j = _j = 0, _ref1 = this._values[i].length; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
          n = this._values[i][j];
          if ((n != null) && n.indexOf(str) >= 0) {
            res.push({
              label: n,
              value: this._genes[j]
            });
          }
          if (res.length >= max) {
            return res;
          }
        }
      }
      return res;
    };

    GeneMatrix.prototype.gene_name = function(gene_id) {
      var idx, n, _i, _len, _ref;
      _ref = this._strain_pos;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        idx = _ref[_i];
        n = this.strain_gene_name(idx, gene_id);
        if (n != null) {
          return n;
        }
      }
      return "not found";
    };

    GeneMatrix.prototype.set_desc = function(gene_name, desc) {
      return this._desc[gene_name] = desc;
    };

    GeneMatrix.prototype.get_desc_non_hypot = function(gene_id) {
      var desc, fst, idx, n, _i, _len, _ref;
      fst = "";
      _ref = this._strain_pos;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        idx = _ref[_i];
        n = this.strain_gene_name(idx, gene_id);
        if (n == null) {
          continue;
        }
        desc = this.get_desc(n);
        if (fst.length === 0) {
          fst = desc;
        }
        if (desc.length > 0 && !desc.match('hypothetical')) {
          return desc;
        }
      }
      return fst;
    };

    GeneMatrix.prototype.get_desc = function(gene_name) {
      var names, res;
      names = (gene_name || '').split(',');
      res = "";
      names.forEach((function(_this) {
        return function(n) {
          if (res.length > 0) {
            res += " # ";
          }
          if (_this._desc[n]) {
            return res += _this._desc[n];
          }
        };
      })(this));
      return res;
    };

    GeneMatrix.prototype.set_first = function(strain_id) {
      var idx;
      idx = this._strain_pos.indexOf(strain_id);
      this._strain_pos.splice(idx, 1);
      this._strain_pos.splice(0, 0, strain_id);
      this._strain_pos.forEach((function(_this) {
        return function(s_id, idx) {
          return _this._strains[s_id].pos = idx;
        };
      })(this));
      return this.dispatch.order_changed();
    };

    GeneMatrix.prototype.set_strain_order = function(order) {
      this._strain_pos = order;
      this._strain_pos.forEach((function(_this) {
        return function(s_id, idx) {
          return _this._strains[s_id].pos = idx;
        };
      })(this));
      return this.dispatch.order_changed();
    };

    return GeneMatrix;

  })();

  this.GeneMatrix = GeneMatrix;

}).call(this);
